Ansible
=======

These are example Ansible playbooks and roles for managing a full
network defined by Pallet Jack, intended to get a proof of concept
environment up and running quickly.

Host inventory and variables are managed by palletjack2ansible, while
the other palletjack2* tools create configuration files which will be
installed by these roles.

Roles are written assuming that infrastructure servers are running
CentOS 8.

The intended workflow is to have Ansible run the infrastructure.yaml
playbook periodically to maintain the server configuration, and then
run generate_ansible_files.sh every time the warehouse changes to
generate new configuration for all services.

Before using the role "pxelinux", read the instructions in
palletjack/examples/README to populate the TFTP boot server with
binaries, and then copy the entire directory tree under
palletjack/examples/pxelinux/ to
palletjack/examples/ansible/roles/pxelinux/files/tftpboot/.

To bootstrap the network, do the following:

1) Populate the warehouse with systems with the following
   infrastructure server roles (values in palletjack.system.role):

   kea             Kea DHCP server
   knot            Knot authoritative DNS server
   knot-resolver   Knot-Resolver recursing DNS resolver
   pxelinux        PXELINUX TFTP server
   netinstall      Kickstart and Preseed HTTP server

   These can be shared on a single system, except for knot and
   knot-resolver, since both servers need to listen to the same port.

2) Write service configuration in the warehouse for the DHCP and DNS
   servers, in the directories
   warehouse/service/dhcp-server/<service name>/ and
   warehouse/service/dns-server/<service name>/.

3) Change the rule for host.netinstall.config_url in
   warehouse/transforms.yaml to point to the HTTP server serving your
   Kickstart and Preseed configuration.

4) Manually install the infrastructure systems with CentOS 8. Use the
   profile "Minimal install".

5) Set up Ansible transport from your workstation to the
   infrastructure systems. The easiest way to do this is to install
   SSH keys permitting root to log in.

6) Test Ansible connectivity by running the test playbook

   ansible-playbook playbooks/test.yaml

7) Generate service configuration by running

   ./generate_ansible_files.sh \
     -w <Warehouse directory> \
     -a <Ansible directory> \
     -s <service name> \
     -i

8) Let Ansible install and configure all infrastructure servers by
   running

   ansible-playbook infrastructure.yaml

You should now have a basic environment capable of network
installation. To set up more systems, define them in the warehouse
(Pallet Jack contains the tools "create_system" and
"create_ipv4_interface" to help with this) and run steps 7 and 8 above
to update service configuration.


ansible.cfg
-----------

Ansible configuration. Points to the inventory.yaml file generated by
palletjack2ansible, and sets some reasonable defaults for connections
and output formatting.


playbooks/test.yaml
-------------------

A simple playbook that runs the "ping" module on every system, to
confirm that transport and login works.

Run it as:

$ ansible-playbook playbooks/test.yaml


generate_ansible_files.sh
-------------------------

Bash script for running all palletjack2* tools on a warehouse,
populating an Ansible repository with configuration ready to be pushed
out by Ansible.

If you will be running Ansible from a control node which cannot
resolve Pallet Jack-controlled names, use the flag "-i" to this script
to write IP addresses to the Ansible inventory.


infrastructure.yaml
-------------------

Ansible playbook for setting up the entire network.

Service selection is done by Ansible tags, while system selection is
done by the variable palletjack.system.role. For example, running

$ ansible-playbook --tags kea infrastructure.yaml

will run just the configuration for all Kea DHCP servers, which will
only have an effect on systems where palletjack.system.role includes
"kea".
