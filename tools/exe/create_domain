#!/usr/bin/env ruby
# frozen_string_literal: true

# Create a domain and IPv4 network in a warehouse
#
# Data model assumptions:
# - Each domain corresponds uniquely to one IPv4 network

require 'palletjack/tool'

class CreateDomain < PalletJack::Tool
  def parse_options(opts)
    # rubocop:disable Layout/FirstArgumentIndentation
    opts.banner =
"Usage: #{$PROGRAM_NAME} -w <warehouse> -d <domain> -n <IPv4 network>

Create domain and ipv4_network objects in a warehouse"
    # rubocop:enable Layout/FirstArgumentIndentation

    opts.on('-d DOMAIN', '--domain DOMAIN', 'domain name', String) {|domain|
      options[:domain] = domain }
    opts.on('-n NETWORK', '--network NETWORK',
            'IPv4 network, in CIDR format', String) {|network|
      options[:network] = network.gsub(/\//, '_') }

    required_option :domain
    required_option :network
  end

  def output
    # Create the IPv4 Network object

    pallet_dir 'ipv4_network', :network
    pallet_box 'ipv4_network', :network, 'dhcp' do
      { net: { dhcp: { 'tftp-server' => '', 'boot-file' => '' } } }
    end
    pallet_box 'ipv4_network', :network, 'identity' do
      { net: { ipv4: { gateway: '' },
               dns:  { resolver: [''] } } }
    end

    # Create the DNS domain object

    pallet_dir 'domain', :domain
    pallet_box 'domain', :domain, 'dns' do
      { net: { dns: { ns: [''], 'soa-ns' => '', 'soa-contact' => '' } } }
    end
    pallet_box 'domain', :domain, 'services' do
      { net: { service: { syslog: [{address: '', port: '514', protocol: 'udp' }] } } }
    end
    pallet_links 'domain', :domain, 'ipv4_network' => ['ipv4_network', :network]
  end
end

if CreateDomain.standalone?(__FILE__)
  CreateDomain.run
end
