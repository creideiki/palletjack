#!/usr/bin/env ruby
# frozen_string_literal: true

# Create a physical and logical IPv4 network interface in a warehouse

require 'palletjack/tool'

class CreateIPv4Interface < PalletJack::Tool
  def parse_options(opts)
    # rubocop:disable Layout/FirstArgumentIndentation
    opts.banner =
"Usage: #{$PROGRAM_NAME} -w <warehouse> -s <system> -d <domain> \\
                    -m <MAC address> -i <IPv4 address> -n <IPv4 network>

Create phy_nic and ipv4_interface objects in a warehouse"
    # rubocop:enable Layout/FirstArgumentIndentation

    opts.on('-s SYSTEM', '--system SYSTEM', 'system name', String) {|system|
      options[:system] = system }
    opts.on('-d DOMAIN', '--domain DOMAIN', 'domain name', String) {|domain|
      options[:domain] = domain }
    opts.on('-m MAC', '--mac MAC', 'MAC address', String) {|mac|
      options[:mac] = mac }
    opts.on('-i ADDR', '--ipv4 ADDR', 'IPv4 address', String) {|addr|
      options[:addr] = addr }
    opts.on('-n NETWORK', '--network NETWORK', 'IPv4 network, in CIDR format',
            String) {|network| options[:network] = network.gsub(/\//, '_') }

    required_option :system
    required_option :domain
    required_option :mac
    required_option :addr
    required_option :network
  end

  def output
    # Create Physical NIC object

    pallet_dir 'phy_nic', :mac
    pallet_box 'phy_nic', :mac, 'identity' do
      { net: { layer2: { name: '' } } }
    end

    # Create IPv4 Interface object

    # rubocop:disable Layout/ArgumentAlignment
    pallet_dir 'ipv4_interface', :addr
    pallet_links 'ipv4_interface', :addr,
      'ipv4_network' => ['ipv4_network', :network],
      'domain'       => ['domain', :domain],
      'phy_nic'      => ['phy_nic', :mac],
      'system'       => ['system', :system]
    # rubocop:enable Layout/ArgumentAlignment
  end
end

if CreateIPv4Interface.standalone?(__FILE__)
  CreateIPv4Interface.run
end
