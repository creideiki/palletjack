#!/usr/bin/env ruby
# frozen_string_literal: true

# Simple script for dumping a specified pallet as YAML.

require 'palletjack/tool'

class DumpPallet < PalletJack::Tool
  def parse_options(parser)
    # rubocop:disable Layout/FirstArgumentIndentation
    parser.banner =
"Usage: #{$PROGRAM_NAME} [options] [<name> ...]

Dump the YAML representation of all named pallets in a Palletjack warehouse

If a name is specified, dump only that pallet. Otherwise, dump all
pallets of the specified type."
    # rubocop:enable Layout/FirstArgumentIndentation

    # The preset value for options[:type] will be overridden when
    # the parse! method of the parser is eventually run and finds
    # a --type option. Keep declarations in that order for clarity.

    # rubocop:disable Layout/ClosingParenthesisIndentation
    options[:type] = 'system'
    parser.on('-t TYPE', '--type TYPE',
              'type (default "system")',
              String) {|type| options[:type] = type }

    options[:match_name] = :leaf_name
    parser.on('-f', '--[no-]full-name',
              'match full_name of pallets instead of leaf_name'
             ) {|maybe| options[:match_name] = if maybe
                                                 :full_name
                                               else
                                                 :leaf_name
                                               end
    }

    options[:position] = false
    parser.on('-p', '--[no-]position',
              'output source file name and position of each value'
             ) {|maybe| TraceableString.debug = maybe }
    # rubocop:enable Layout/ClosingParenthesisIndentation
  end

  # Dump the yaml contents of all pallets given to STDOUT

  def dump_pallets(pallets)
    abort('No matching pallets found.') if pallets.empty?

    pallets.each do |p|
      puts '---'
      puts "# #{p.kind}: #{p.name}"
      puts p.to_yaml.gsub(' =^.^= ', '   # ')
    end
  end

  def output
    # Since the Tool framework uses destructive opts.parse!, all options
    # were removed from argv, leaving just the names to search for.
    if argv.empty?
      dump_pallets jack[kind: options[:type]]
    else
      argv.each do |name|
        dump_pallets jack[kind: options[:type], options[:match_name] => name]
      end
    end
  end
end

if DumpPallet.standalone?(__FILE__)
  DumpPallet.run
end
