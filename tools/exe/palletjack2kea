#!/usr/bin/env ruby
# frozen_string_literal: true

# Write configuration for the Kea DHCP server from a Palletjack warehouse

require 'palletjack/tool'
require 'json'

class PalletJack2Kea < PalletJack::Tool
  def parse_options(opts)
    # rubocop:disable Layout/FirstArgumentIndentation
    opts.banner =
"Usage: #{$PROGRAM_NAME} -w <warehouse> -s <service>

Write configuration for the Kea DHCP server from a Palletjack warehouse"
    # rubocop:enable Layout/FirstArgumentIndentation

    opts.on('-s SERVICE', '--service SERVICE',
            'service name for global configuration',
            String) {|service| options[:service] = service }

    required_option :service
  end

  def dhcp4_option(name, data)
    {
      'name' => name,
      'data' => data
    }
  end

  # The internal representation of the generated configuration, ready
  # to be tested or printed.

  attr_reader :kea_config

  def process
    service = jack.fetch(kind:        'service',
                         parent_name: 'dhcp-server',
                         name:        options[:service])

    @kea_config = { 'Dhcp4' => service['service.kea_v4'] }

    @kea_config['Dhcp4']['subnet4'] = []

    service.descendants(kind: 'ipv4_network') do |net|
      net_config = {'subnet' => net['net.ipv4.cidr'],
                    'reservations' => [],
                    'option-data' => []}
      if net['net.ipv4.gateway']
        net_config['option-data'] <<
          dhcp4_option('routers', net['net.ipv4.gateway'])
      end

      if net['net.dns.resolver']
        resolvers = String.new
        net['net.dns.resolver'].each do |resolver|
          resolvers << resolver << ', '
        end

        net_config['option-data'] <<
          dhcp4_option('domain-name-servers', resolvers.chomp(', '))
      end

      if net['net.dhcp.tftp-server']
        net_config['option-data'] <<
          dhcp4_option('tftp-server-name', net['net.dhcp.tftp-server'])

        # Option 66/tftp-server-name is the standard way of sending a
        # TFTP server address, but some DHCP clients still want it in
        # the next-server field.
        net_config['next-server'] = net['net.dhcp.tftp-server']
      end

      if net['net.dhcp.boot-file']
        net_config['option-data'] <<
          dhcp4_option('boot-file-name', net['net.dhcp.boot-file'])
      end

      net.children(kind:  'ipv4_interface',
                   none?: { 'net.layer2.address' => nil }
                  ) do |interface|
        net_config['reservations'] << {
          'hw-address' => interface['net.layer2.address'],
          'ip-address' => interface['net.ipv4.address'],
          'hostname' => interface['net.dns.fqdn'],
          'option-data' =>
          [
            dhcp4_option('domain-name',
                         interface.parents(kind: 'system').first['net.dns.domain'])
          ]
        }
      end

      @kea_config['Dhcp4']['subnet4'] << net_config
    end
  end

  def output
    puts git_header('palletjack2kea')

    jj @kea_config
  end
end

if PalletJack2Kea.standalone?(__FILE__)
  PalletJack2Kea.run
end
