#!/usr/bin/env ruby
# frozen_string_literal: true

# Write YAML files containing Salt pillar data.
#
# Intended to be run from a Git post-update hook or similar, since
# running the entire Pallet Jack infrastructure once per minion for
# every pillar refresh is a bit excessive, writing YAML files which
# will be read by a Salt pillar, in one of two modes of operation:
#
# 1. Global pillar data
#
#    Intended to be included in an ordinary Salt pillar root.
#
#    Example Salt master configuration:
#
#    pillar_roots:
#      base:
#        - /etc/salt/pillar
#
#    Example /etc/salt/pillar/top.sls:
#
#    base:
#      '*':
#        - palletjack.global
#
# 2. Per-minion pillar data
#
#    Intended to be read by the `palletjack_yaml_file` external pillar
#    (which you will have to install manually).
#
#    Example Salt master configuration:
#
#    ext_pillar:
#      - palletjack_yaml_file: /var/cache/palletjack/{saltenv}/{minion}.yaml
#
#    Data model assumptions:
#      - Salt minion ID is FQDN

require 'palletjack/tool'
require 'yaml'

class PalletJack2Salt < PalletJack::Tool
  def parse_options(opts)
    # rubocop:disable Layout/FirstArgumentIndentation
    opts.banner =
"Usage: #{$PROGRAM_NAME} -w <warehouse> [ -g <dir> ] [ -m <dir> ]

Write Salt pillar data from a Palletjack warehouse."
    # rubocop:enable Layout/FirstArgumentIndentation

    opts.on('-g DIR', '--global DIR', 'global pillar directory',
            String) {|dir| options[:global_pillar] = dir }
    opts.on('-m DIR', '--minion DIR', 'per-minion pillar directory',
            String) {|dir| options[:minion_pillar] = dir }

    required_option :global_pillar, :minion_pillar
  end

  # Helpers for generating global pillars

  def process_global_pillar
    result = {}

    (config['pillar.global.each-pallet'] || []).each do |dst_key, kind|
      result[dst_key] ||= {}

      jack.each(kind: kind) do |pallet|
        result[dst_key][pallet.full_name] = pallet.to_hash.except('pallet')
      end
    end

    (config['pillar.global.each-leaf-pallet'] || []).each do |dst_key, kind|
      result[dst_key] ||= {}

      jack.each(kind: kind) do |pallet|
        next unless pallet.children(kind: kind).empty?

        result[dst_key][pallet.full_name] = pallet.to_hash.except('pallet')
      end
    end

    result
  end

  # Helpers for generating per-minion pillars

  def ipv4_interfaces(system)
    result = Hash.new

    system.children(kind: 'ipv4_interface') do |interface|
      result[interface['net.layer2.name']] = {
        interface['net.ipv4.address'] =>
        interface.filter('net.ipv4', 'net.layer2').to_hash
      }
    end

    result
  end

  def process_minion_pillars
    result = {}

    jack.each(kind: 'system') do |system|
      yaml_output = {}
      yaml_output['ipv4_interfaces'] = ipv4_interfaces(system)

      config['pillar.per-minion.each-subtree'].each do |dst_key, src_key|
        yaml_output[dst_key] = system.fetch(src_key)
      end

      result[system['net.dns.fqdn']] = { 'palletjack' => yaml_output }
    end

    result
  end

  # The internal representation of the generated configuration, ready
  # to be tested or printed.

  attr_reader :salt_config

  def process
    @salt_config = {}

    @salt_config[:global] = process_global_pillar if options[:global_pillar]
    @salt_config[:minion] = process_minion_pillars if options[:minion_pillar]
  end

  def output
    if @salt_config[:global]
      config_dir :global_pillar, 'palletjack'
      config_file :global_pillar, 'palletjack', 'global.sls' do |slsfile|
        slsfile << git_header('palletjack2salt')
        slsfile <<
          { 'palletjack' => { 'global' => @salt_config[:global] } }.to_yaml
      end
    end

    @salt_config[:minion]&.each do |id, config|
      config_file :minion_pillar, "#{id}.yaml" do |yamlfile|
        yamlfile << git_header('palletjack2salt')
        yamlfile << config.to_yaml
      end
    end
  end
end

if PalletJack2Salt.standalone?(__FILE__)
  PalletJack2Salt.run
end
